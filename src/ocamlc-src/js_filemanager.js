
//Provides: caml_output_val
//Requires: caml_marshal_constants, caml_int64_to_bytes, caml_failwith
var caml_output_val = function (){
  function Writer () { this.chunk = []; }
  Writer.prototype = {
    chunk_idx:20, block_len:0, obj_counter:0, size_32:0, size_64:0,
    write:function (size, value) {
      for (var i = size - 8;i >= 0;i -= 8)
        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;
    },
    write_code:function (size, code, value) {
      this.chunk[this.chunk_idx++] = code;
      for (var i = size - 8;i >= 0;i -= 8)
        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;
    },
    finalize:function () {
      this.block_len = this.chunk_idx - 20;
      this.chunk_idx = 0;
      this.write (32, 0x8495A6BE);
      this.write (32, this.block_len);
      this.write (32, this.obj_counter);
      this.write (32, this.size_32);
      this.write (32, this.size_64);
      return this.chunk;
    }
  }
  return function (v) {
    var writer = new Writer ();
    var stack = [];
    function extern_rec (v) {
      var cst = caml_marshal_constants;
      if (v instanceof Array && v[0] === (v[0]|0)) {
        if (v[0] == 255) {
          // Int64
          writer.write (8, cst.CODE_CUSTOM);
          for (var i = 0; i < 3; i++) writer.write (8, "_j\0".charCodeAt(i));
          var b = caml_int64_to_bytes (v);
          for (var i = 0; i < 8; i++) writer.write (8, b[i]);
          writer.size_32 += 4;
          writer.size_64 += 3;
          return;
        }
        if (v[0] < 16 && v.length - 1 < 8)
          writer.write (8, cst.PREFIX_SMALL_BLOCK + v[0] + ((v.length - 1)<<4));
        else
          writer.write_code(32, cst.CODE_BLOCK32, (v.length << 10) | v[0]);
        writer.size_32 += v.length;
        writer.size_64 += v.length;
        if (v.length > 1) stack.push (v, 1);
      } else if (v instanceof MlString) {
        var len = v.getLen();
        if (len < 0x20)
          writer.write (8, cst.PREFIX_SMALL_STRING + len);
        else if (len < 0x100)
          writer.write_code (8, cst.CODE_STRING8, len);
        else
          writer.write_code (32, cst.CODE_STRING32, len);
        for (var i = 0;i < len;i++) writer.write (8, v.get(i));
        writer.size_32 += 1 + (((len + 4) / 4)|0);
        writer.size_64 += 1 + (((len + 8) / 8)|0);
      } else {
        // if (v != (v|0)) caml_failwith("output_value: non-serializable value");
        if (v >= 0 && v < 0x40) {
          writer.write (8, cst.PREFIX_SMALL_INT + v);
        } else {
          if (v >= -(1 << 7) && v < (1 << 7))
            writer.write_code(8, cst.CODE_INT8, v);
          else if (v >= -(1 << 15) && v < (1 << 15))
            writer.write_code(16, cst.CODE_INT16, v);
          else
            writer.write_code(32, cst.CODE_INT32, v);
        }
      }
    }
    extern_rec (v);
    while (stack.length > 0) {
      var i = stack.pop ();
      var v = stack.pop ();
      if (i + 1 < v.length) stack.push (v, i + 1);
      extern_rec (v[i]);
    }
    writer.finalize ();
    return writer.chunk;
  }
} ();





//Provides: caml_global_filesystem
var caml_global_filesystem = [0];
caml_global_filesystem["std_exit.cmo"] = new MlString("Caml1999O007\x00\x00\x04Cc\x00\x00\x008\x00\x00\x00\x00\x00\x00\x00P\x00\x00\x00!\x00\x00\x00:\x00\x00\x009\x00\x00\x00\x00\x00\x00\x00\x84\x95\xa6\xbe\x00\x00\x03\xff\x00\x00\x00\xf6\x00\x00\x03\x8a\x00\x00\x03_\xa0\x08\x00\x00(\x00T(Std_exit\xb0\xc0+std_exit.mlR\x01\x04\x04\x01\x04\x0c\xc0\x04\x02R\x01\x04\x04\x01\x04\x18@\x90\xb0\xb3\x90\xb0F$unit@@\x90@\x02\x05\xf5\xe1\x00\x01\x02\xa0\x90A\xa7\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1@\xb0A#int@\x08\x00\x00 \x00@@@A@@@\xb0\xc0&_none_A@\x00\xff\x04\x02A\xb0B$char@\x04\x06\xb0C&string@\x04\x08\xb0D%float@\x04\x0a\xb0E$bool@\x08\x00\x00 \x00@@\x91\xa0\xb0\xb0\%false@@@\xa0\xb0\xb0]$true@@@@A@@@\x04\x15\xb0F$unit@\x08\x00\x00 \x00@@\x91\xa0\xb0\xb0^\x22()@@@@A@@@\x04\x1d\xb0G#exn@\x08\x00\x00 \x00@@\x91@A@@@\x04!\xb0H%array@\x08\x00\x00 \x00\xa0\xb0\x90@\x02\x05\xf5\xe1\x00J@A@A@\xa0\xb0AAA@@\x04)\xb0I$list@\x08\x00\x00 \x00\xa0\xb0\x90@\x02\x05\xf5\xe1\x00K@A\x91\xa0\xb0\xb0_\x22[]@@@\xa0\xb0\xb0`\x22::@\xa0\x04\x0c\xa0\xb0\xb3\x90\x04\x14\xa0\x04\x11@\x90@\x02\x05\xf5\xe1\x00L@@@A@\xa0\xb0A@@@@\x04A\xb0J\x27format6@\x08\x00\x00 \x00\xa0\xb0\x90@\x02\x05\xf5\xe1\x00R\xa0\xb0\x90@\x02\x05\xf5\xe1\x00Q\xa0\xb0\x90@\x02\x05\xf5\xe1\x00P\xa0\xb0\x90@\x02\x05\xf5\xe1\x00O\xa0\xb0\x90@\x02\x05\xf5\xe1\x00N\xa0\xb0\x90@\x02\x05\xf5\xe1\x00M@F@A@\xa0\xb0AAA\xa0\xb0AAA\xa0\xb0AAA\xa0\xb0AAA\xa0\xb0AAA\xa0\xb0AAA@@\x04b\xb0K&option@\x08\x00\x00 \x00\xa0\xb0\x90@\x02\x05\xf5\xe1\x00S@A\x91\xa0\xb0\xb0a$None@@@\xa0\xb0\xb0b$Some@\xa0\x04\x0c@@@A@\xa0\xb0A@@@@\x04t\xb0O&lazy_t@\x08\x00\x00 \x00\xa0\xb0\x90@\x02\x05\xf5\xe1\x00T@A@A@\xa0\xb0A@@@@\x04\x7c\xb0L)nativeint@\x04\x7f\xb0M%int32@\x04\x81\xb0N%int64@\x04\x83\xb0[:Undefined_recursive_moduleC\xa0\xa0\xb0\x92\xa0\xb0\xb3\x90\x04\x87@\x90@\x02\x05\xf5\xe1\x00B\xa0\xb0\xb3\x90\x04\x94@\x90@\x02\x05\xf5\xe1\x00@\xa0\x04\x05@\x02\x05\xf5\xe1\x00Z@\x04\x93\xb0Z.Assert_failureC\xa0\xa0\xb0\x92\xa0\x04\x11\xa0\x04\x0d\xa0\x04\x0e@\x02\x05\xf5\xe1\x00[@\x04\x9c\xb0W0Division_by_zeroC\xa0@\x04\x9f\xb0V+End_of_fileC\xa0@\x04\xa2\xb0U)Sys_errorC\xa0\xa0\x04\x1d@\x04\xa6\xb0Y.Sys_blocked_ioC\xa0@\x04\xa9\xb0T)Not_foundC\xa0@\x04\xac\xb0S\x27FailureC\xa0\xa0\x04\x27@\x04\xb0\xb0R0Invalid_argumentC\xa0\xa0\x04+@\x04\xb4\xb0X.Stack_overflowC\xa0@\x04\xb7\xb0Q-Out_of_memoryC\xa0@\x04\xba\xb0P-Match_failureC\xa0\xa0\xb0\x92\xa0\x048\xa0\x044\xa0\x045@\x02\x05\xf5\xe1\x00\@\x04\xc3\x90\xb0@*PervasivesA\xc0@@@@\xb0@@@@@@\x84\x95\xa6\xbe\x00\x00\x00f\x00\x00\x00\x12\x00\x00\x00F\x00\x00\x00?\x08\x00\x00$\x00(Std_exitP`\xa0\xa0\x91\xb0@*PervasivesAH\xa0\xa0\x92\xb0@\x04\x0aA\@\xa0\xa0\x04\x0c0\x0eUol\xe5\x16\x10\x27\xefHW\xb5\x90\xe2\xad\xc3\xa0\xa0*Pervasives0H6\xc2T\xf0\xea\xca\xd9/\xbfg\xab\xc5%\xfd\xda@@@p\x01\x04\x13");
caml_global_filesystem["std_exit.cmo"] = new MlString("\x43\x61\x6d\x6c\x31\x39\x39\x39\x4f\x30\x30\x37\x00\x00\x04\x43\x63\x00\x00\x00\x38\x00\x00\x00\x00\x00\x00\x00\x50\x00\x00\x00\x21\x00\x00\x00\x3a\x00\x00\x00\x39\x00\x00\x00\x00\x00\x00\x00\x84\x95\xa6\xbe\x00\x00\x03\xff\x00\x00\x00\xf6\x00\x00\x03\x8a\x00\x00\x03\x5f\xa0\x08\x00\x00\x28\x00\x54\x28\x53\x74\x64\x5f\x65\x78\x69\x74\xb0\xc0\x2b\x73\x74\x64\x5f\x65\x78\x69\x74\x2e\x6d\x6c\x52\x01\x04\x04\x01\x04\x0c\xc0\x04\x02\x52\x01\x04\x04\x01\x04\x18\x40\x90\xb0\xb3\x90\xb0\x46\x24\x75\x6e\x69\x74\x40\x40\x90\x40\x02\x05\xf5\xe1\x00\x01\x02\xa0\x90\x41\xa7\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb2\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\xb1\x40\xb0\x41\x23\x69\x6e\x74\x40\x08\x00\x00\x20\x00\x40\x40\x40\x41\x40\x40\x40\xb0\xc0\x26\x5f\x6e\x6f\x6e\x65\x5f\x41\x40\x00\xff\x04\x02\x41\xb0\x42\x24\x63\x68\x61\x72\x40\x04\x06\xb0\x43\x26\x73\x74\x72\x69\x6e\x67\x40\x04\x08\xb0\x44\x25\x66\x6c\x6f\x61\x74\x40\x04\x0a\xb0\x45\x24\x62\x6f\x6f\x6c\x40\x08\x00\x00\x20\x00\x40\x40\x91\xa0\xb0\xb0\x5c\x25\x66\x61\x6c\x73\x65\x40\x40\x40\xa0\xb0\xb0\x5d\x24\x74\x72\x75\x65\x40\x40\x40\x40\x41\x40\x40\x40\x04\x15\xb0\x46\x24\x75\x6e\x69\x74\x40\x08\x00\x00\x20\x00\x40\x40\x91\xa0\xb0\xb0\x5e\x22\x28\x29\x40\x40\x40\x40\x41\x40\x40\x40\x04\x1d\xb0\x47\x23\x65\x78\x6e\x40\x08\x00\x00\x20\x00\x40\x40\x91\x40\x41\x40\x40\x40\x04\x21\xb0\x48\x25\x61\x72\x72\x61\x79\x40\x08\x00\x00\x20\x00\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x4a\x40\x41\x40\x41\x40\xa0\xb0\x41\x41\x41\x40\x40\x04\x29\xb0\x49\x24\x6c\x69\x73\x74\x40\x08\x00\x00\x20\x00\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x4b\x40\x41\x91\xa0\xb0\xb0\x5f\x22\x5b\x5d\x40\x40\x40\xa0\xb0\xb0\x60\x22\x3a\x3a\x40\xa0\x04\x0c\xa0\xb0\xb3\x90\x04\x14\xa0\x04\x11\x40\x90\x40\x02\x05\xf5\xe1\x00\x4c\x40\x40\x40\x41\x40\xa0\xb0\x41\x40\x40\x40\x40\x04\x41\xb0\x4a\x27\x66\x6f\x72\x6d\x61\x74\x36\x40\x08\x00\x00\x20\x00\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x52\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x51\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x50\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x4f\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x4e\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x4d\x40\x46\x40\x41\x40\xa0\xb0\x41\x41\x41\xa0\xb0\x41\x41\x41\xa0\xb0\x41\x41\x41\xa0\xb0\x41\x41\x41\xa0\xb0\x41\x41\x41\xa0\xb0\x41\x41\x41\x40\x40\x04\x62\xb0\x4b\x26\x6f\x70\x74\x69\x6f\x6e\x40\x08\x00\x00\x20\x00\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x53\x40\x41\x91\xa0\xb0\xb0\x61\x24\x4e\x6f\x6e\x65\x40\x40\x40\xa0\xb0\xb0\x62\x24\x53\x6f\x6d\x65\x40\xa0\x04\x0c\x40\x40\x40\x41\x40\xa0\xb0\x41\x40\x40\x40\x40\x04\x74\xb0\x4f\x26\x6c\x61\x7a\x79\x5f\x74\x40\x08\x00\x00\x20\x00\xa0\xb0\x90\x40\x02\x05\xf5\xe1\x00\x54\x40\x41\x40\x41\x40\xa0\xb0\x41\x40\x40\x40\x40\x04\x7c\xb0\x4c\x29\x6e\x61\x74\x69\x76\x65\x69\x6e\x74\x40\x04\x7f\xb0\x4d\x25\x69\x6e\x74\x33\x32\x40\x04\x81\xb0\x4e\x25\x69\x6e\x74\x36\x34\x40\x04\x83\xb0\x5b\x3a\x55\x6e\x64\x65\x66\x69\x6e\x65\x64\x5f\x72\x65\x63\x75\x72\x73\x69\x76\x65\x5f\x6d\x6f\x64\x75\x6c\x65\x43\xa0\xa0\xb0\x92\xa0\xb0\xb3\x90\x04\x87\x40\x90\x40\x02\x05\xf5\xe1\x00\x42\xa0\xb0\xb3\x90\x04\x94\x40\x90\x40\x02\x05\xf5\xe1\x00\x40\xa0\x04\x05\x40\x02\x05\xf5\xe1\x00\x5a\x40\x04\x93\xb0\x5a\x2e\x41\x73\x73\x65\x72\x74\x5f\x66\x61\x69\x6c\x75\x72\x65\x43\xa0\xa0\xb0\x92\xa0\x04\x11\xa0\x04\x0d\xa0\x04\x0e\x40\x02\x05\xf5\xe1\x00\x5b\x40\x04\x9c\xb0\x57\x30\x44\x69\x76\x69\x73\x69\x6f\x6e\x5f\x62\x79\x5f\x7a\x65\x72\x6f\x43\xa0\x40\x04\x9f\xb0\x56\x2b\x45\x6e\x64\x5f\x6f\x66\x5f\x66\x69\x6c\x65\x43\xa0\x40\x04\xa2\xb0\x55\x29\x53\x79\x73\x5f\x65\x72\x72\x6f\x72\x43\xa0\xa0\x04\x1d\x40\x04\xa6\xb0\x59\x2e\x53\x79\x73\x5f\x62\x6c\x6f\x63\x6b\x65\x64\x5f\x69\x6f\x43\xa0\x40\x04\xa9\xb0\x54\x29\x4e\x6f\x74\x5f\x66\x6f\x75\x6e\x64\x43\xa0\x40\x04\xac\xb0\x53\x27\x46\x61\x69\x6c\x75\x72\x65\x43\xa0\xa0\x04\x27\x40\x04\xb0\xb0\x52\x30\x49\x6e\x76\x61\x6c\x69\x64\x5f\x61\x72\x67\x75\x6d\x65\x6e\x74\x43\xa0\xa0\x04\x2b\x40\x04\xb4\xb0\x58\x2e\x53\x74\x61\x63\x6b\x5f\x6f\x76\x65\x72\x66\x6c\x6f\x77\x43\xa0\x40\x04\xb7\xb0\x51\x2d\x4f\x75\x74\x5f\x6f\x66\x5f\x6d\x65\x6d\x6f\x72\x79\x43\xa0\x40\x04\xba\xb0\x50\x2d\x4d\x61\x74\x63\x68\x5f\x66\x61\x69\x6c\x75\x72\x65\x43\xa0\xa0\xb0\x92\xa0\x04\x38\xa0\x04\x34\xa0\x04\x35\x40\x02\x05\xf5\xe1\x00\x5c\x40\x04\xc3\x90\xb0\x40\x2a\x50\x65\x72\x76\x61\x73\x69\x76\x65\x73\x41\xc0\x40\x40\x40\x40\xb0\x40\x40\x40\x40\x40\x40\x84\x95\xa6\xbe\x00\x00\x00\x66\x00\x00\x00\x12\x00\x00\x00\x46\x00\x00\x00\x3f\x08\x00\x00\x24\x00\x28\x53\x74\x64\x5f\x65\x78\x69\x74\x50\x60\xa0\xa0\x91\xb0\x40\x2a\x50\x65\x72\x76\x61\x73\x69\x76\x65\x73\x41\x48\xa0\xa0\x92\xb0\x40\x04\x0a\x41\x5c\x40\xa0\xa0\x04\x0c\x30\x0e\x55\x6f\x6c\xe5\x16\x10\x27\xef\x48\x57\xb5\x90\xe2\xad\xc3\xa0\xa0\x2a\x50\x65\x72\x76\x61\x73\x69\x76\x65\x73\x30\x48\x36\xc2\x54\xf0\xea\xca\xd9\x2f\xbf\x67\xab\xc5\x25\xfd\xda\x40\x40\x40\x70\x01\x04\x13");


function list_mem(l, o) {
    if (l[0]) { return false; }
    else if (l[1] == o) { return true; }
    else if (l[2] == 0) { return false; }
    else { return list_mem(l[2], o); }
} 


//Provides: caml_sys_open
//Requires: MlString, caml_raise_sys_error, caml_global_data, caml_global_filesystem
function caml_sys_open (x, y) {
    console.log("##### caml_sys_open #####"); 
   // console.log("-------------------------caml_sys_open!--------------------------");
    console.debug(x);
    // console.debug(caml_global_filesystem);
    var v = caml_global_data.interfaces[x];
    var f = caml_global_filesystem[x];
    // console.log("f =");
    // console.debug(f); 
    if (v) {
	var s = new MlString (v);
	s.offset = 0;
	return s;
    } else if (f != undefined) {
	return f;
    } else {
	if ( list_mem(y, 3) ) {
	    var s = new MlString ("");
	    caml_global_filesystem[x] = s;
	    s.offset = 0;
	    return s;
	} else
	    caml_raise_sys_error (x + ": no such file or directory");
    }
}

//Provides: caml_sys_file_exists
//Requires: caml_global_data, caml_global_filesystem
function caml_sys_file_exists (x) {
    console.log("##### caml_sys_file_exists #####");
    // console.debug(x);
    var b = (caml_global_data.interfaces[x])?1:0;
    if ( !b ) {
	var s = x.toJsString();
	// console.debug(s);
	return (caml_global_filesystem[s])?1:0;
    } else return b;
}

//Provides: caml_ml_open_descriptor_in
function caml_ml_open_descriptor_in (x) {
    console.log("##### caml_ml_open_descriptor_in #####");
    console.debug(x);
    return x;
}

//Provides: caml_ml_open_descriptor_out
function caml_ml_open_descriptor_out (x) {
    console.log("##### caml_ml_open_descriptor_out #####");
    console.debug(x);
    return x;
}

//Provides: caml_ml_output
function caml_ml_output (x, s, p, l) {
    console.log("##### caml_ml_output #####");
    console.debug(x);
    // console.log("REGARDE ICI------------------------------------------------------------------------------------");
    // console.debug(p);
    // console.debug(l);
    if ( x == 1 ) { // stdout
	// console.log(s.toString());
	var o = document.getElementById("output");
	o.appendChild (document.createTextNode(s.toString().slice(p,p+l)))
	;
    } else if ( x == 2 ) {
	// console.debug(s.toJsString());
	var o = document.getElementById("output");
	o.appendChild (document.createTextNode(s.toString().slice(p,p+l)))
    } else {
	// DUMMY !
	console.log("x = ");
	console.debug(x);
	console.log("s = ");
	console.debug(s);
	// x.string = "pouet";
	var s_add = s.bytes.slice(p, l);
	var s = new MlString(x.bytes+s_add);
	x.bytes = s.bytes;
	x.fullBytes = s.fullBytes;
	x.len = s.len;
	x.last = s.last;
	x.offset = s.offset;

	// DEBUG
	var div = document.getElementById("toto.cmi");
	div.innerHTML = caml_global_filesystem["toto.cmi"].bytes;
	var div = document.getElementById("toto.cmo");
	div.innerHTML = caml_global_filesystem["toto.cmo"].bytes;

	// console.debug(caml_global_filesystem["toto.cmo"]);
	// console.log("toto.cmi = ");
	// console.debug(caml_global_filesystem["toto.cmi"]);
	// x[0] = new MlString(x[0].toJsString() + s.toJsString());
    }
    // console.debug(x);
    // console.log("-------------------------caml_ml_output! END---------------------");
    return 0;
}

//Provides: caml_ml_output_char
//Requires: caml_ml_output
function caml_ml_output_char (x, c) {
    console.log("##### caml_ml_output_char #####");
    return caml_ml_output (x, String.fromCharCode (c));
}

//Provides: caml_ml_output_int
//Requires: caml_ml_output
function caml_ml_output_int (x, i) {
    console.log("##### caml_ml_output_int #####");
    console.debug(i);
    var s;
    if (i == undefined) s = new MlString(String.fromCharCode(0));
    else s = new MlString(i+"");
    return caml_ml_output (x, s);
}

//Provides: caml_output_value
//Requires: caml_ml_output, caml_output_value_to_string
function caml_output_value (x, v) {
    console.log("##### caml_output_value #####");
    console.debug(x);
    console.debug(v);
    // var a = caml_output_value_to_string(v).array;
    // var s = "";
    // for ( var i=0 ; i < a.length ; i++ ) 
    // 	s = s+String.fromCharCode(a[i]);
    // console.debug(s);
    // return caml_ml_output (x, new MlString(s));
    var v = caml_output_val(v);
    console.log("magic is here");
    var s = "";
    for ( var i=0 ; i < v.length ; i++ ) 
    	s = s+String.fromCharCode(v[i]);
    console.debug(s);
    console.debug(v);
    return caml_ml_output(x, new MlString(s));
}

//Provides: caml_sys_get_argv const
//Requires: MlString
function caml_sys_get_argv () {
    console.log("##### caml_sys_get_argv #####");
    var exec_name = new MlWrappedString("ocamlc");
    var arg1 = new MlWrappedString("toto.ml");
    var argv = [0, exec_name, arg1];
    return [0, exec_name, argv];
}

//Provides: caml_sys_remove
function caml_sys_remove() {
    console.log("##### caml_sys_remove #####");
    // A AMELIORER OU PAS??
    return 0;
}

//Provides: caml_sys_exit
function caml_sys_exit(x) {
    console.log("##### caml_sys_exit #####");
    return x;
}

//Provides: caml_ml_seek_in
function caml_ml_seek_in(x, i) {
    console.log("##### caml_ml_seek_in #####");
    console.debug(x);
    console.debug(i);
    x.offset = i;
    return 0;
}

//Provides: caml_ml_seek_out
function caml_ml_seek_out(x, i) {
    console.log("##### caml_ml_seek_out #####");
    console.debug(x);
    console.debug(i);
    x.offset = i;
    return 0;
}

//Provides: caml_md5_chan
function caml_md5_chan(x) {
    console.log("##### caml_md5_chan #####");
    console.debug(x);
    return x;
}


//Provides: caml_ml_pos_out
function caml_ml_pos_out(x) {
    console.log("##### caml_ml_pos_out #####");
    return x.offset;
}

